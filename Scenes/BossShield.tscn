[gd_scene load_steps=33 format=2]

[ext_resource path="res://Scripts/BossShield.gd" type="Script" id=1]
[ext_resource path="res://Meshes/Sebasbossshield.obj" type="ArrayMesh" id=2]
[ext_resource path="res://Scenes/Bar3D.tscn" type="PackedScene" id=3]
[ext_resource path="res://new_noisetexture.tres" type="Texture" id=4]
[ext_resource path="res://Scripts/PerlinNoise3D.gd" type="Script" id=5]

[sub_resource type="CubeMesh" id=1]

[sub_resource type="SpatialMaterial" id=2]
flags_transparent = true
albedo_color = Color( 0.231373, 0.615686, 0.717647, 0.329412 )

[sub_resource type="BoxShape" id=3]
extents = Vector3( 2, 1, 0.1 )

[sub_resource type="VisualShaderNodeInput" id=4]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=6]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=7]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeTexture" id=8]
texture = ExtResource( 4 )

[sub_resource type="VisualShaderNodeScalarOp" id=9]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 1

[sub_resource type="VisualShaderNodeColorConstant" id=10]
output_port_for_preview = 1
constant = Color( 1, 0.302838, 0.581703, 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=11]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.05 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=12]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.05 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=13]
output_port_for_preview = 0
function = 29

[sub_resource type="VisualShaderNodeVectorOp" id=14]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarFunc" id=15]
output_port_for_preview = 0
function = 29

[sub_resource type="VisualShaderNodeColorConstant" id=16]
output_port_for_preview = 0
constant = Color( 0.41615, 0, 0.16646, 1 )

[sub_resource type="VisualShaderNodeScalarConstant" id=17]
constant = 5.0

[sub_resource type="VisualShaderNodeScalarFunc" id=18]
function = 29

[sub_resource type="VisualShaderNodeScalarOp" id=19]
default_input_values = [ 0, 0.0, 1, 2.0 ]

[sub_resource type="VisualShaderNodeCustom" id=20]
script = ExtResource( 5 )

[sub_resource type="VisualShaderNodeVectorOp" id=21]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=22]
input_name = "normal"

[sub_resource type="VisualShaderNodeVec3Constant" id=23]

[sub_resource type="VisualShaderNodeInput" id=24]
input_name = "time"

[sub_resource type="VisualShaderNodeInput" id=25]
input_name = "vertex"

[sub_resource type="VisualShader" id=26]
code = "shader_type spatial;
render_mode depth_draw_alpha_prepass, cull_disabled;

uniform sampler2D tex_frg_15;

// PerlinNoise3D

		vec3 mod289_3(vec3 x) {
			return x - floor(x * (1.0 / 289.0)) * 289.0;
		}

		vec4 mod289_4(vec4 x) {
			return x - floor(x * (1.0 / 289.0)) * 289.0;
		}

		vec4 permute(vec4 x) {
			return mod289_4(((x * 34.0) + 1.0) * x);
		}

		vec4 taylorInvSqrt(vec4 r) {
			return 1.79284291400159 - 0.85373472095314 * r;
		}

		vec3 fade(vec3 t) {
			return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
		}

		// Classic Perlin noise
		float cnoise(vec3 P) {
			vec3 Pi0 = floor(P); // Integer part for indexing.
			vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1.
			Pi0 = mod289_3(Pi0);
			Pi1 = mod289_3(Pi1);
			vec3 Pf0 = fract(P); // Fractional part for interpolation.
			vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0.
			vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
			vec4 iy = vec4(Pi0.yy, Pi1.yy);
			vec4 iz0 = vec4(Pi0.z);
			vec4 iz1 = vec4(Pi1.z);

			vec4 ixy = permute(permute(ix) + iy);
			vec4 ixy0 = permute(ixy + iz0);
			vec4 ixy1 = permute(ixy + iz1);

			vec4 gx0 = ixy0 * (1.0 / 7.0);
			vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
			gx0 = fract(gx0);
			vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
			vec4 sz0 = step(gz0, vec4(0.0));
			gx0 -= sz0 * (step(0.0, gx0) - 0.5);
			gy0 -= sz0 * (step(0.0, gy0) - 0.5);

			vec4 gx1 = ixy1 * (1.0 / 7.0);
			vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
			gx1 = fract(gx1);
			vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
			vec4 sz1 = step(gz1, vec4(0.0));
			gx1 -= sz1 * (step(0.0, gx1) - 0.5);
			gy1 -= sz1 * (step(0.0, gy1) - 0.5);

			vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);
			vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);
			vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);
			vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);
			vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);
			vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);
			vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);
			vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);

			vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
			g000 *= norm0.x;
			g010 *= norm0.y;
			g100 *= norm0.z;
			g110 *= norm0.w;
			vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
			g001 *= norm1.x;
			g011 *= norm1.y;
			g101 *= norm1.z;
			g111 *= norm1.w;

			float n000 = dot(g000, Pf0);
			float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
			float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
			float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
			float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
			float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
			float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
			float n111 = dot(g111, Pf1);

			vec3 fade_xyz = fade(Pf0);
			vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
			vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
			float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);
			return 2.2 * n_xyz;
		}
	

void vertex() {
// Input:8
	vec3 n_out8p0;
	n_out8p0 = VERTEX;

// Input:4
	vec3 n_out4p0;
	n_out4p0 = NORMAL;

// Vector:5
	vec3 n_out5p0;
	n_out5p0 = vec3(0.000000,0.000000,0.000000);

// Scalar:10
	float n_out10p0;
	n_out10p0 = 5.000000;

// ScalarFunc:11
	float n_out11p0;
	n_out11p0 = roundEven(n_out10p0);

// ScalarOp:12
	float n_in12p1 = 2.00000;
	float n_out12p0;
	n_out12p0 = n_out11p0 + n_in12p1;

// Input:7
	float n_out7p0;
	n_out7p0 = TIME;

// PerlinNoise3D:2
	float n_out2p0;
	{
		n_out2p0 = cnoise(vec3((n_out4p0.xy + n_out5p0.xy) * n_out12p0, n_out7p0)) * 0.5 + 0.5
	}
// VectorOp:3
	vec3 n_out3p0;
	n_out3p0 = n_out8p0 - vec3(n_out2p0);

// Output:0
	VERTEX = n_out3p0;

}

void fragment() {
// Color:25
	vec3 n_out25p0;
	float n_out25p1;
	n_out25p0 = vec3(0.416150,0.000000,0.166460);
	n_out25p1 = 1.000000;

// Input:10
	vec3 n_out10p0;
	n_out10p0 = vec3(UV,0.0);

// Texture:15
	vec3 n_out15p0;
	float n_out15p1;
	vec4 tex_frg_15_read = texture( tex_frg_15 , n_out10p0.xy );
	n_out15p0 = tex_frg_15_read.rgb;
	n_out15p1 = tex_frg_15_read.a;

// Input:11
	float n_out11p0;
	n_out11p0 = TIME;

// ScalarFunc:12
	float n_out12p0;
	n_out12p0 = sin(n_out11p0);

// ScalarOp:13
	float n_in13p1 = 2.00000;
	float n_out13p0;
	n_out13p0 = n_out12p0 / n_in13p1;

// ScalarOp:16
	float n_out16p0;
	n_out16p0 = dot(n_out15p0,vec3(0.333333,0.333333,0.333333)) - n_out13p0;

// ScalarFunc:24
	float n_out24p0;
	n_out24p0 = roundEven(n_out16p0);

// ScalarOp:20
	float n_in20p1 = 0.05000;
	float n_out20p0;
	n_out20p0 = n_out16p0 - n_in20p1;

// ScalarOp:21
	float n_in21p0 = 1.00000;
	float n_out21p0;
	n_out21p0 = n_in21p0 - n_out20p0;

// ScalarFunc:22
	float n_out22p0;
	n_out22p0 = roundEven(n_out21p0);

// Color:19
	vec3 n_out19p0;
	float n_out19p1;
	n_out19p0 = vec3(1.000000,0.302838,0.581703);
	n_out19p1 = 1.000000;

// VectorOp:23
	vec3 n_out23p0;
	n_out23p0 = vec3(n_out22p0) + n_out19p0;

// Output:0
	ALBEDO = n_out25p0;
	ALPHA = n_out24p0;
	EMISSION = n_out23p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 584, -149 )
modes/cull = 2
modes/depth_draw = 3
nodes/vertex/0/position = Vector2( 1155, 168 )
nodes/vertex/2/node = SubResource( 20 )
nodes/vertex/2/position = Vector2( -20, 240 )
nodes/vertex/3/node = SubResource( 21 )
nodes/vertex/3/position = Vector2( 300, 100 )
nodes/vertex/4/node = SubResource( 22 )
nodes/vertex/4/position = Vector2( -220, 160 )
nodes/vertex/5/node = SubResource( 23 )
nodes/vertex/5/position = Vector2( -540, 240 )
nodes/vertex/7/node = SubResource( 24 )
nodes/vertex/7/position = Vector2( -160, 420 )
nodes/vertex/8/node = SubResource( 25 )
nodes/vertex/8/position = Vector2( 100, 60 )
nodes/vertex/10/node = SubResource( 17 )
nodes/vertex/10/position = Vector2( -714, 357 )
nodes/vertex/11/node = SubResource( 18 )
nodes/vertex/11/position = Vector2( -546, 357 )
nodes/vertex/12/node = SubResource( 19 )
nodes/vertex/12/position = Vector2( -359, 375.538 )
nodes/vertex/connections = PoolIntArray( 2, 0, 3, 1, 5, 0, 2, 1, 4, 0, 2, 0, 8, 0, 3, 0, 7, 0, 2, 3, 10, 0, 11, 0, 11, 0, 12, 0, 12, 0, 2, 2, 3, 0, 0, 0 )
nodes/fragment/0/position = Vector2( 2373, 0 )
nodes/fragment/10/node = SubResource( 4 )
nodes/fragment/10/position = Vector2( 540, 60 )
nodes/fragment/11/node = SubResource( 5 )
nodes/fragment/11/position = Vector2( 441, 357 )
nodes/fragment/12/node = SubResource( 6 )
nodes/fragment/12/position = Vector2( 651, 357 )
nodes/fragment/13/node = SubResource( 7 )
nodes/fragment/13/position = Vector2( 882, 378 )
nodes/fragment/15/node = SubResource( 8 )
nodes/fragment/15/position = Vector2( 820, 80 )
nodes/fragment/16/node = SubResource( 9 )
nodes/fragment/16/position = Vector2( 1100, 140 )
nodes/fragment/19/node = SubResource( 10 )
nodes/fragment/19/position = Vector2( 1780, 460 )
nodes/fragment/20/node = SubResource( 11 )
nodes/fragment/20/position = Vector2( 1380, 280 )
nodes/fragment/21/node = SubResource( 12 )
nodes/fragment/21/position = Vector2( 1580, 220 )
nodes/fragment/22/node = SubResource( 13 )
nodes/fragment/22/position = Vector2( 1780, 180 )
nodes/fragment/23/node = SubResource( 14 )
nodes/fragment/23/position = Vector2( 2060, 200 )
nodes/fragment/24/node = SubResource( 15 )
nodes/fragment/24/position = Vector2( 1780, -20 )
nodes/fragment/25/node = SubResource( 16 )
nodes/fragment/25/position = Vector2( 2037, -168 )
nodes/fragment/connections = PoolIntArray( 11, 0, 12, 0, 12, 0, 13, 0, 10, 0, 15, 0, 13, 0, 16, 1, 16, 0, 20, 0, 20, 0, 21, 1, 21, 0, 22, 0, 16, 0, 24, 0, 22, 0, 23, 0, 19, 0, 23, 1, 15, 0, 16, 0, 25, 0, 0, 0, 23, 0, 0, 5, 24, 0, 0, 1 )

[sub_resource type="ShaderMaterial" id=27]
shader = SubResource( 26 )

[node name="Shield" type="StaticBody"]
collision_layer = 3
collision_mask = 0
script = ExtResource( 1 )
MAX_HEALTH = 30.0
IS_VULNERABLE_PER_STAGE = {
"0-Testing": true,
"1-Pregame": false,
"10-Defeat": false,
"2-Exposition": false,
"3-EnemyFleet": false,
"4-BossAppears": true,
"5-Missiles": true,
"6-Trex": true,
"7-BlackHole": true,
"8-Eclipse": true,
"9-Victory": false
}

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 2, 0, 0, 0, 1, 0, 0, 0, 0.1, 0, 1, 0 )
visible = false
mesh = SubResource( 1 )
material/0 = SubResource( 2 )

[node name="HealthBar3D" parent="." instance=ExtResource( 3 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.55676, 0 )

[node name="RegenerationTimer" type="Timer" parent="."]
one_shot = true

[node name="CollisionShape" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0 )
shape = SubResource( 3 )

[node name="BehindArea" type="Area" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0.2 )
monitorable = false
collision_mask = 2

[node name="CollisionShape" type="CollisionShape" parent="BehindArea"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0 )
shape = SubResource( 3 )

[node name="FrontArea" type="Area" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.2 )
monitorable = false
collision_mask = 2

[node name="CollisionShape" type="CollisionShape" parent="FrontArea"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0 )
shape = SubResource( 3 )

[node name="MeshInstance2" type="MeshInstance" parent="."]
transform = Transform( -1.1, 0, 4.28356e-07, 0, 1.1, 0, -4.28356e-07, 0, -1.1, -0.539992, 0.783004, 0.659403 )
mesh = ExtResource( 2 )
material/0 = SubResource( 27 )
