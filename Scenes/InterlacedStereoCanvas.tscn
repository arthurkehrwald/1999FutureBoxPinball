[gd_scene load_steps=4 format=2]

[ext_resource path="res://Materials/Stereo.shader" type="Shader" id=1]

[sub_resource type="ShaderMaterial" id=2]
resource_local_to_scene = true
shader = ExtResource( 1 )
shader_param/mode = 0
shader_param/is_enabled = true
shader_param/swap = false

[sub_resource type="GDScript" id=3]
script/source = "extends CanvasItem

export(int, \"Interlaced\", \"OverUnder\", \"LeftRight\") var mode : int setget _set_mode
var mode_init := false

export var left_viewport_path := NodePath() setget _set_left_viewport_path
var left_viewport_path_init := false
var left_viewport : Viewport setget _set_left_viewport
var left_viewport_init := false

export var right_viewport_path := NodePath() setget _set_right_viewport_path
var right_viewport_path_init := false
var right_viewport : Viewport setget _set_right_viewport
var right_viewport_init := false

export var is_enabled := true setget _set_is_enabled
var is_enabled_init := false

func _ready():
	_set_left_viewport_path(left_viewport_path)
	_set_right_viewport_path(right_viewport_path)
	_set_mode(mode)
	_set_is_enabled(is_enabled)

func _process(_delta):
	if (Input.is_action_just_pressed(\"toggle_stereo\")):
		_set_is_enabled(!is_enabled)

func _set_left_viewport_path(value: NodePath) -> void:
	if (left_viewport_path_init and value == left_viewport_path):
		return
	left_viewport_path = value
	var viewport = get_node(left_viewport_path)
	if left_viewport_path == NodePath() or viewport != null:
		_set_left_viewport(get_node(left_viewport_path) as Viewport)

func _set_left_viewport(value: Viewport) -> void:
	if (left_viewport_init and value == left_viewport):
		return
	left_viewport = value
	var tex = left_viewport.get_texture() if left_viewport != null else null
	material.set(\"shader_param/left_camera\", tex)
	left_viewport_init = true
	var path = left_viewport.get_path() if left_viewport != null else NodePath()
	_set_left_viewport_path(path)

func _set_right_viewport_path(value: NodePath) -> void:
	if (right_viewport_path_init and value == right_viewport_path):
		return
	right_viewport_path = value
	var viewport = get_node(right_viewport_path)
	if right_viewport_path == NodePath() or viewport != null:
		_set_right_viewport(get_node(right_viewport_path) as Viewport)

func _set_right_viewport(value: Viewport) -> void:
	if (right_viewport_init and value == right_viewport):
		return
	right_viewport = value
	var tex = right_viewport.get_texture() if right_viewport != null else null
	material.set(\"shader_param/right_camera\", tex)
	right_viewport_init = true
	var path = right_viewport.get_path() if right_viewport != null else NodePath()
	_set_right_viewport_path(path)

func _set_mode(value: int) -> void:
	if (mode_init and value == mode):
		return
	mode = value
	material.set(\"shader_param/mode\", mode)
	mode_init = true

func _set_is_enabled(value: bool) -> void:
	if (is_enabled_init and value == is_enabled):
		return
	is_enabled = value
	material.set(\"shader_param/is_enabled\", is_enabled)
	is_enabled_init = true
"

[node name="InterlacedStereoCanvas" type="ColorRect"]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 3 )
__meta__ = {
"_edit_use_anchors_": false
}
