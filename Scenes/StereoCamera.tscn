[gd_scene load_steps=6 format=2]

[ext_resource path="res://Scenes/StereoCanvas.tscn" type="PackedScene" id=1]
[ext_resource path="res://Scenes/OffAxisCamera.tscn" type="PackedScene" id=2]
[ext_resource path="res://Materials/Stereo.shader" type="Shader" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends Spatial

export var zoom = 0.333
export var stereo_offset = 1.4
export var manualMoveSpeed = 1.0
export var left_cam_path := NodePath()
export var right_cam_path := NodePath()

onready var left_cam = get_node(left_cam_path) as OffAxisCamera
onready var right_cam = get_node(right_cam_path) as OffAxisCamera

func _process(delta):
	handle_debug_input(delta)
	update_cam_positions()
	update_cam_zoom()


func handle_debug_input(delta):
	if Input.is_action_pressed(\"debug_increase_stereo_offset\"):
		stereo_offset += manualMoveSpeed * delta * 0.1
	
	if Input.is_action_pressed(\"debug_decrease_stereo_offset\"):
		stereo_offset -= manualMoveSpeed * delta * 0.1
	
	var translation = Vector3.ZERO
	
	# Forward/backward and up/down are switched because the camera is
	# rotated 90 degress to face straight down
	
	if Input.is_action_pressed(\"debug_move_camera_up\"):
		translation += Vector3.FORWARD * delta * manualMoveSpeed;
	
	if Input.is_action_pressed(\"debug_move_camera_down\"):
		translation += Vector3.BACK * delta * manualMoveSpeed;
	
	if Input.is_action_pressed(\"debug_move_camera_left\"):
		translation += Vector3.LEFT * delta * manualMoveSpeed;
	
	if Input.is_action_pressed(\"debug_move_camera_right\"):
		translation += Vector3.RIGHT * delta * manualMoveSpeed;
	
	if Input.is_action_pressed(\"debug_move_camera_forward\"):
		translation += Vector3.UP * delta * manualMoveSpeed;
	
	if Input.is_action_pressed(\"debug_move_camera_backward\"):
		translation += Vector3.DOWN * delta * manualMoveSpeed;
	
	transform = transform.translated(translation)


func update_cam_positions():
	left_cam.global_transform.origin = global_transform.origin - (global_transform.basis.x * stereo_offset / 2)
	right_cam.global_transform.origin = global_transform.origin + (global_transform.basis.x * stereo_offset / 2)


func update_cam_zoom():
	left_cam.zoom = zoom
	right_cam.zoom = zoom
"

[sub_resource type="ShaderMaterial" id=2]
resource_local_to_scene = true
shader = ExtResource( 3 )
shader_param/mode = 0
shader_param/is_enabled = true
shader_param/swap = false

[node name="StereoCamera" type="Spatial"]
transform = Transform( 0.517241, 0, 0, 0, 0.5427, 0.0603309, 0, -0.0570401, 0.574011, 0, 0, 0 )
script = SubResource( 1 )
__meta__ = {
"_editor_description_": ""
}
zoom = 0.063
stereo_offset = 0.2
left_cam_path = NodePath("ViewportContainer/Left/OffAxisCamera")
right_cam_path = NodePath("ViewportContainer/Right/OffAxisCamera")

[node name="ViewportContainer" type="ViewportContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
stretch = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Left" type="Viewport" parent="ViewportContainer"]
size = Vector2( 1024, 1200 )
handle_input_locally = false
render_target_update_mode = 3
gui_disable_input = true

[node name="OffAxisCamera" parent="ViewportContainer/Left" instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.72, 0, 0 )
frustum_offset = Vector2( 0.04536, 0 )
zoom = 0.172

[node name="Right" type="Viewport" parent="ViewportContainer"]
size = Vector2( 1024, 1200 )
handle_input_locally = false
render_target_update_mode = 3
gui_disable_input = true

[node name="OffAxisCamera" parent="ViewportContainer/Right" instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.72, 0, 0 )
current = true
frustum_offset = Vector2( -0.04536, 0 )
zoom = 0.172

[node name="StereoCanvas" parent="." instance=ExtResource( 1 )]
material = SubResource( 2 )
mode = 1
left_viewport_path = NodePath("../ViewportContainer/Left")
right_viewport_path = NodePath("../ViewportContainer/Right")
