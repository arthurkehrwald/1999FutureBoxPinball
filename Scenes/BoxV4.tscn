[gd_scene load_steps=31 format=2]

[ext_resource path="res://Meshes/box_v5.obj" type="ArrayMesh" id=1]
[ext_resource path="res://Materials/mat_for_3d_prints.tres" type="Material" id=2]
[ext_resource path="res://Scripts/PerlinNoise3D.gd" type="Script" id=3]
[ext_resource path="res://Meshes/Box_06.obj" type="ArrayMesh" id=4]
[ext_resource path="res://Textures/Space_BG_02.jpg" type="Texture" id=5]
[ext_resource path="res://Meshes/Box_07.obj" type="ArrayMesh" id=6]

[sub_resource type="VisualShaderNodeTransformVecMult" id=1]
default_input_values = [ 0, Transform( 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 ), 1, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeVectorDerivativeFunc" id=2]
default_input_values = [ 0, Vector3( 1, 1, 0 ) ]

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeTexture" id=4]
output_port_for_preview = 0
texture = ExtResource( 5 )

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=6]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=7]

[sub_resource type="VisualShaderNodeVec3Constant" id=8]
constant = Vector3( 0.5, 0, 0 )

[sub_resource type="VisualShader" id=9]
code = "shader_type spatial;
uniform sampler2D tex_frg_4;



void vertex() {
// Output:0

}

void fragment() {
// Input:6
	float n_out6p0 = TIME;

// ScalarOp:7
	float n_in7p0 = 0.00000;
	float n_out7p0 = n_in7p0 * n_out6p0;

// Input:3
	vec3 n_out3p0 = vec3(SCREEN_UV, 0.0);

// VectorOp:8
	vec3 n_out8p0 = vec3(n_out7p0) + n_out3p0;

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, n_out8p0.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// Output:0
	ALBEDO = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -22.5999, -32.8708 )
nodes/fragment/0/position = Vector2( 1100, 120 )
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( 280, 440 )
nodes/fragment/4/node = SubResource( 4 )
nodes/fragment/4/position = Vector2( 860, 300 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( 240, 280 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( 460, 80 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( 680, 180 )
nodes/fragment/9/node = SubResource( 8 )
nodes/fragment/9/position = Vector2( 80, 60 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -100, 160 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -40, 300 )
nodes/fragment/connections = PoolIntArray( 4, 0, 0, 0, 7, 0, 8, 0, 8, 0, 4, 0, 3, 0, 8, 1, 6, 0, 7, 1 )

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )

[sub_resource type="VisualShaderNodeScalarConstant" id=11]

[sub_resource type="VisualShaderNodeInput" id=12]
output_port_for_preview = 0
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=13]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeTextureUniform" id=14]
uniform_name = "TextureUniform"

[sub_resource type="VisualShaderNodeTexture" id=15]
output_port_for_preview = 0
texture = ExtResource( 5 )

[sub_resource type="VisualShaderNodeInput" id=16]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeCustom" id=17]
output_port_for_preview = 0
script = ExtResource( 3 )

[sub_resource type="VisualShaderNodeVectorFunc" id=18]

[sub_resource type="VisualShader" id=19]
code = "shader_type spatial;
uniform sampler2D tex_frg_4;


// PerlinNoise3D

		vec3 mod289_3(vec3 x) {
			return x - floor(x * (1.0 / 289.0)) * 289.0;
		}

		vec4 mod289_4(vec4 x) {
			return x - floor(x * (1.0 / 289.0)) * 289.0;
		}

		vec4 permute(vec4 x) {
			return mod289_4(((x * 34.0) + 1.0) * x);
		}

		vec4 taylorInvSqrt(vec4 r) {
			return 1.79284291400159 - 0.85373472095314 * r;
		}

		vec3 fade(vec3 t) {
			return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
		}

		// Classic Perlin noise
		float cnoise(vec3 P) {
			vec3 Pi0 = floor(P); // Integer part for indexing.
			vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1.
			Pi0 = mod289_3(Pi0);
			Pi1 = mod289_3(Pi1);
			vec3 Pf0 = fract(P); // Fractional part for interpolation.
			vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0.
			vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
			vec4 iy = vec4(Pi0.yy, Pi1.yy);
			vec4 iz0 = vec4(Pi0.z);
			vec4 iz1 = vec4(Pi1.z);

			vec4 ixy = permute(permute(ix) + iy);
			vec4 ixy0 = permute(ixy + iz0);
			vec4 ixy1 = permute(ixy + iz1);

			vec4 gx0 = ixy0 * (1.0 / 7.0);
			vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
			gx0 = fract(gx0);
			vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
			vec4 sz0 = step(gz0, vec4(0.0));
			gx0 -= sz0 * (step(0.0, gx0) - 0.5);
			gy0 -= sz0 * (step(0.0, gy0) - 0.5);

			vec4 gx1 = ixy1 * (1.0 / 7.0);
			vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
			gx1 = fract(gx1);
			vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
			vec4 sz1 = step(gz1, vec4(0.0));
			gx1 -= sz1 * (step(0.0, gx1) - 0.5);
			gy1 -= sz1 * (step(0.0, gy1) - 0.5);

			vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);
			vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);
			vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);
			vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);
			vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);
			vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);
			vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);
			vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);

			vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
			g000 *= norm0.x;
			g010 *= norm0.y;
			g100 *= norm0.z;
			g110 *= norm0.w;
			vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
			g001 *= norm1.x;
			g011 *= norm1.y;
			g101 *= norm1.z;
			g111 *= norm1.w;

			float n000 = dot(g000, Pf0);
			float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
			float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
			float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
			float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
			float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
			float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
			float n111 = dot(g111, Pf1);

			vec3 fade_xyz = fade(Pf0);
			vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
			vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
			float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);
			return 2.2 * n_xyz;
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Input:5
	vec3 n_out5p0 = vec3(SCREEN_UV, 0.0);

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, n_out5p0.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// VectorFunc:9
	vec3 n_in9p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out9p0 = normalize(n_in9p0);

// Scalar:10
	float n_out10p0 = 0.000000;

// Input:11
	float n_out11p0 = TIME;

// PerlinNoise3D:8
	float n_out8p0;
	{
		n_out8p0 = cnoise(vec3((n_out5p0.xy + n_out9p0.xy) * n_out10p0, n_out11p0)) * 0.5 + 0.5
	}

// ScalarOp:12
	float n_out12p0 = dot(n_out4p0, vec3(0.333333, 0.333333, 0.333333)) + n_out8p0;

// Output:0
	ALBEDO = vec3(n_out12p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -229, -78.1708 )
nodes/vertex/0/position = Vector2( 560, 140 )
nodes/fragment/0/position = Vector2( 540, 140 )
nodes/fragment/4/node = SubResource( 15 )
nodes/fragment/4/position = Vector2( 40, -60 )
nodes/fragment/5/node = SubResource( 16 )
nodes/fragment/5/position = Vector2( -200, 220 )
nodes/fragment/8/node = SubResource( 17 )
nodes/fragment/8/position = Vector2( 40, 340 )
nodes/fragment/9/node = SubResource( 18 )
nodes/fragment/9/position = Vector2( -320, 400 )
nodes/fragment/10/node = SubResource( 11 )
nodes/fragment/10/position = Vector2( -174, 462.191 )
nodes/fragment/11/node = SubResource( 12 )
nodes/fragment/11/position = Vector2( -320, 580 )
nodes/fragment/12/node = SubResource( 13 )
nodes/fragment/12/position = Vector2( 294, 237 )
nodes/fragment/13/node = SubResource( 14 )
nodes/fragment/13/position = Vector2( 780, -20 )
nodes/fragment/connections = PoolIntArray( 9, 0, 8, 1, 10, 0, 8, 2, 11, 0, 8, 3, 5, 0, 8, 0, 5, 0, 4, 0, 4, 0, 12, 0, 8, 0, 12, 1, 12, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=20]
shader = SubResource( 19 )

[sub_resource type="SpatialMaterial" id=21]
flags_unshaded = true

[sub_resource type="BoxShape" id=22]
extents = Vector3( 6.5, 1, 10 )

[sub_resource type="BoxShape" id=23]
extents = Vector3( 6.5, 3.08219, 1 )

[sub_resource type="BoxShape" id=24]
extents = Vector3( 1, 2.9607, 10 )

[node name="BoxV4" type="StaticBody"]
collision_mask = 0

[node name="Box_06" type="MeshInstance" parent="."]
visible = false
mesh = ExtResource( 4 )
material/0 = SubResource( 10 )

[node name="Box_06_05" type="MeshInstance" parent="."]
visible = false
mesh = ExtResource( 4 )
material/0 = SubResource( 20 )

[node name="Box_07" type="MeshInstance" parent="."]
mesh = ExtResource( 6 )
material/0 = SubResource( 21 )

[node name="CollisionShape" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 3.81833, -0.0512481 )
visible = false
shape = SubResource( 22 )

[node name="CollisionShape2" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, 0.994522, 0.104528, 0, -0.104528, 0.994522, 0, -1.00664, -0.0371313 )
visible = false
shape = SubResource( 22 )

[node name="CollisionShape3" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, 0.978147, 0.207912, 0, -0.207912, 0.978147, 0, 1.60709, 8.67985 )
visible = false
shape = SubResource( 23 )

[node name="CollisionShape5" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -5.5, 1.07762, -0.0512481 )
visible = false
shape = SubResource( 24 )

[node name="CollisionShape4" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, 0.978147, 0.207912, 0, -0.207912, 0.978147, 0, 0.745893, -9.17884 )
visible = false
shape = SubResource( 23 )

[node name="CollisionShape6" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 5.5, 1.07762, -0.0512481 )
visible = false
shape = SubResource( 24 )

[node name="MeshInstance" type="MeshInstance" parent="."]
visible = false
mesh = ExtResource( 1 )
material/0 = ExtResource( 2 )
